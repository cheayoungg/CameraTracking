# 드레그해서 객체 추적
# 절대적 o : 중앙을 기준으로 오른쪽/왼쪽

import cv2

def select_roi(event, x, y, flags, param):
    global x_init, y_init, capture, init_tracking, tracker, roi_hist

    if event == cv2.EVENT_LBUTTONDOWN:
        x_init, y_init = x, y
        init_tracking = True

    elif event == cv2.EVENT_MOUSEMOVE and init_tracking:
        x_end, y_end = x, y
        cv2.rectangle(frame, (x_init, y_init), (x_end, y_end), (255, 0, 0), 2)

    elif event == cv2.EVENT_LBUTTONUP:
        x_end, y_end = x, y
        cv2.rectangle(frame, (x_init, y_init), (x_end, y_end), (255, 0, 0), 2)
        roi = frame[min(y_init, y_end):max(y_init, y_end), min(x_init, x_end):max(x_init, x_end)]
        roi_hist = cv2.calcHist([roi], [0], None, [16], [0, 180])
        roi_hist = cv2.normalize(roi_hist, roi_hist, 0, 255, cv2.NORM_MINMAX)
        tracker = cv2.TrackerKCF_create()
        tracker.init(frame, (x_init, y_init, abs(x_end - x_init), abs(y_end - y_init)))
        init_tracking = False


def direction_box(box, center): # center_x >= frame.shape[1] / 2
    direction = ''
    x, y, w, h = box

    # calculate distance from center to left and right boundaries of the box
    distance_to_left = center[0] - x
    distance_to_right = x + w - center[0]

    if center[0] < frame.shape[1] / 2:
        direction = 'L'
    elif center[0] >= frame.shape[1] / 2:
        direction = 'R'

    return direction


capture = cv2.VideoCapture(0)
cv2.namedWindow('frame')
cv2.setMouseCallback('frame', select_roi)

init_tracking = False
roi_hist = None
tracker = None

while True:
    ret, frame = capture.read()

    # check if roi_hist has been defined and tracker has been initialized
    if roi_hist is not None and 'tracker' in locals():
        # update tracker and get new position
        success, box = tracker.update(frame)

        # if tracking is successful, draw box and label it with direction
        if success:
            box = [int(b) for b in box]
            cv2.rectangle(frame, (box[0], box[1]), (box[0] + box[2], box[1] + box[3]), (255, 0, 0), 2)
            center = (int(box[0] + box[2] / 2), int(box[1] + box[3] / 2)) #center_x = int(box[0] + box[2] / 2)
            #center_x = int(box[0] + box[2] / 2) # center[0]
            direction = direction_box(box, center)
            cv2.putText(frame, direction, (center[0] - 20, center[1] - 20), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow('frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

capture.release()
cv2.destroyAllWindows()
